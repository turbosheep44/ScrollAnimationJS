:root {
    --main-bg-color: brown;
    --transition-distance: 150px;
}

/* if there is an animated element that had not been shown yet, 
    it should not respond to pointer events */
[animation-data] {
    pointer-events: none;

}

/* once an animated element has been shown, pointer events work
    as usual */
[animation-data].animation-complete {
    pointer-events: auto;
}

/* all animations are 200ms long
    TODO: ask if we can use SCSS and then create a transition duration & transition delay property */
[animation-data] {
    transition-duration: 200ms;
}



/*

    fade animations
    appear to fade into view while moving in a direction

*/

[animation-data^='fade'] {
    opacity: 0;
    transition-property: opacity, transform;
}

[animation-data^='fade'].animation-complete {
    opacity: 1;
    transform: none;
}

[animation-data='fade-up'] {
    transform: translate3d(0, var(--transition-distance), 0);
}

[animation-data='fade-down'] {
    transform: translate3d(0, calc((-1) * var(--transition-distance)), 0);
}

[animation-data='fade-right'] {
    transform: translate3d(calc((-1) * var(--transition-distance)), 0, 0);
}

[animation-data='fade-left'] {
    transform: translate3d(var(--transition-distance), 0, 0);
}

/*

    spin animations
    appear to spin in 3D around the Y or X axis

*/

[animation-data^='spin'] {
    transition-property: transform;
}

[animation-data^='spin'].animation-complete {
    transform: none;
}

[animation-data='spin-left'] {
    transform: rotate3d(0, 1, 0, 90deg);
}

[animation-data='spin-right'] {
    transform: rotate3d(0, 1, 0, -90deg);
}

[animation-data='spin-up'] {
    transform: rotate3d(1, 0, 0, 90deg);
}

[animation-data='spin-down'] {
    transform: rotate3d(1, 0, 0, -90deg);
}

/*

    rotation animations
    appear to spin in around the Z axis

*/

[animation-data^='rotate'] {
    opacity: 0;
    transition-property: opacity, transform;
}

[animation-data^='rotate'].animation-complete {
    opacity: 1;
    transform: none;
}

[animation-data='rotate-left'] {
    transform: rotate3d(0, 0, 1, 90deg);
}

[animation-data='rotate-right'] {
    transform: rotate3d(0, 0, 1, -90deg);
}

/*

TODO: use SASS if possible

[animation-data] {
  @for $i from 1 through 20 {
    [animation-duration = '#{$i}'] {
    transition-duration: #{$i * 100}ms;
  }

  }
}
*/

[animation-data][animation-duration="0"] {
    transition-duration: 0ms;
}

[animation-data][animation-duration="1"] {
    transition-duration: 100ms;
}

[animation-data][animation-duration="2"] {
    transition-duration: 200ms;
}

[animation-data][animation-duration="3"] {
    transition-duration: 300ms;
}

[animation-data][animation-duration="4"] {
    transition-duration: 400ms;
}

[animation-data][animation-duration="5"] {
    transition-duration: 500ms;
}

[animation-data][animation-duration="6"] {
    transition-duration: 600ms;
}

[animation-data][animation-duration="7"] {
    transition-duration: 700ms;
}

[animation-data][animation-duration="8"] {
    transition-duration: 800ms;
}

[animation-data][animation-duration="9"] {
    transition-duration: 900ms;
}

[animation-data][animation-duration="10"] {
    transition-duration: 1000ms;
}

[animation-data][animation-duration="11"] {
    transition-duration: 1100ms;
}

[animation-data][animation-duration="12"] {
    transition-duration: 1200ms;
}

[animation-data][animation-duration="13"] {
    transition-duration: 1300ms;
}

[animation-data][animation-duration="14"] {
    transition-duration: 1400ms;
}

[animation-data][animation-duration="15"] {
    transition-duration: 1500ms;
}

[animation-data][animation-duration="16"] {
    transition-duration: 1600ms;
}

[animation-data][animation-duration="17"] {
    transition-duration: 1700ms;
}

[animation-data][animation-duration="18"] {
    transition-duration: 1800ms;
}

[animation-data][animation-duration="19"] {
    transition-duration: 1900ms;
}

[animation-data][animation-duration="20"] {
    transition-duration: 2000ms;
}